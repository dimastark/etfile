#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');
const async = require('async');
const cp = require('child_process');
const program = require('commander');

const utils = require('../utils');

const servicesDir = path.join(__dirname, '../services/');
const settingsFile = path.join(servicesDir, 'settings.json');

program.option('-r, --remote <remote>', 'remote repository for store files')
    .parse(process.argv);

const paths = program.args;
if (paths.length !== 1) {
    return console.error('Only one path is possible');
}
if (!program['remote']) {
    return console.error('Please provide remote repository');
}

const repository = program['remote'];
const watchPath = path.isAbsolute(paths[0])
    ? paths[0]
    : path.join(process.cwd(), paths[0]);

async.series([
    fs.stat.bind(null, settingsFile),
    cb => utils.ifArbitratorNotStarted(() => {
        console.info('Arbitrator not started');
        console.info('Please run setup-wizard');
        process.exit(1);
    }, cb),
    cb => utils.ifGitClientNotStarted(() => {
        console.info('Git-client not started');
        console.info('Please run setup-wizard');
        process.exit(1);
    }, cb),
    cb => {
        console.info(`Running daemon in directory: ${watchPath}`);
        console.info(`Mapped to remote: ${repository}`);

        const fsServicePath = path.join(servicesDir, 'file-system.js');
        cp.execSync(`forever -m 1 start ${fsServicePath} ${watchPath} ${repository}`);
        cb();
    }
], error => {
    if (!error) {
        process.exit();
    }
    if (error.code === 'ENOENT') {
        console.error('File with settings not exists');
        console.error('Please run setup wizard');
    } else {
        console.error('Something goes wrong');
    }

    process.exit(1);
});
