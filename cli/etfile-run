#!/usr/bin/env node
'use strict';

const path = require('path');
const async = require('async');
const utils = require('../utils');
const program = require('commander');
const exec = require('child_process').execSync;

const servicesDir = path.join(__dirname, '../services/');

program.option('-r, --remote <remote>', 'remote repository for store files', null, null)
    .parse(process.argv);

const paths = program.args;
if (paths.length !== 1) {
    return console.error('Only one path is possible');
}
if (!program['remote']) {
    return console.error('Please provide remote repository');
}

const watchPath = path.isAbsolute(paths[0])
    ? paths[0] : path.join(process.cwd(), paths[0]);
const repository = program['remote'];

async.waterfall([
    cb => utils.ifArbitratorNotStarted(() => {
        console.info('Arbitrator not started');
        console.info('Running arbitrator...');
        exec(`forever -m 1 start ${path.join(servicesDir, 'arbitration.js')}`);
        cb();
    }, cb),
    cb => utils.ifGitClientNotStarted(() => {
        console.info('Git-client not started');
        console.info('Running git-client...');
        exec(`forever -m 1 start ${path.join(servicesDir, 'git-client.js')}`);
        cb();
    }, cb),
    cb => {
        console.info(`Running daemon in directory: ${watchPath}`);
        console.info(`Mapped to remote: ${repository}`);

        const fsServicePath = path.join(servicesDir, 'file-system.js');
        exec(`forever -m 1 start ${fsServicePath} ${watchPath} ${repository}`);
        cb();
    }
], () => process.exit());
