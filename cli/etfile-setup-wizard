#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const prompt = require('prompt');
const promisify = require('util').promisify;
const exec = require('child_process').execSync;

const getParamsAsync = promisify(prompt.get);
const writeFileAsync = promisify(fs.writeFile);

const ifArbitratorStarted = require('../utils').ifArbitratorStarted;

const servicesDir = path.join(__dirname, '../services/');
const settingsPath = path.join(servicesDir, 'settings.json');
const arbitrationPath = path.join(servicesDir, 'arbitration.js');

prompt.message = chalk['blue']("etfile");
prompt.start();

getParamsAsync([{
    name: 'commitFrequency',
    pattern: /^\d+$/,
    description: 'Frequency of commits to remote repository',
    required: true,
    default: 1
}, {
    name: 'pushFrequency',
    pattern: /^\d+$/,
    description: 'Frequency of push to remote repository',
    required: true,
    default: 5
}, {
    name: 'needSquash',
    pattern: /^(yes|no|y|n|true|false)$/,
    description: 'Squash all commits into one',
    required: true,
    default: true
}]).then(result =>
    writeFileAsync(settingsPath, JSON.stringify(result))
).then(() => {
    console.info('Settings applied');
    ifArbitratorStarted(() => {
        console.log('Restarting arbitrator...');
        exec(`forever -m 1 restart ${arbitrationPath}`);
    }, () => {
        console.log('Running arbitrator...');
        exec(`forever -m 1 start ${arbitrationPath}`);
    });
}).catch(() => process.exit(1));
