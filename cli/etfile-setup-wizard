#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');
const async = require('async');
const prompt = require('prompt');
const cp = require('child_process');

const checks = require('../utils/checks');

const servicesDir = path.join(__dirname, '../services/');
const settingsPath = path.join(servicesDir, 'settings.json');
const gitClientPath = path.join(servicesDir, 'git-client.js');
const arbitrationPath = path.join(servicesDir, 'arbitration.js');

prompt.message = "etfile";
prompt.start();

prompt.get([{
    name: 'commitFrequency',
    pattern: /^\d+$/,
    description: 'Frequency of commits to remote repository',
    required: true,
    default: 1
}, {
    name: 'pushFrequency',
    pattern: /^\d+$/,
    description: 'Frequency of push to remote repository',
    required: true,
    default: 5
}, {
    name: 'needSquash',
    pattern: /^(yes|no|y|n|true|false)$/,
    description: 'Squash all commits into one',
    required: true,
    default: true
}, {
    name: 'smartMode',
    pattern: /^(yes|no|y|n|true|false)$/,
    description: 'Smart select when to commit',
    required: true,
    default: true
}], (error, data) => {
    if (error) {
        console.log(error);
        process.exit(1);
    }

    fs.writeFileSync(settingsPath, JSON.stringify(data));
    console.info('Settings applied');

    async.series([
        cb => checks.ifArbitratorStarted(() => {
            console.log('Restarting arbitrator...');
            cp.execSync(`forever -m 1 restart ${arbitrationPath}`);
            cb();
        }, () => {
            console.log('Running arbitrator...');
            cp.execSync(`forever -m 1 start ${arbitrationPath}`);
            cb();
        }),

        cb => checks.ifGitClientStarted(() => {
            console.log('Restarting git-client...');
            cp.execSync(`forever -m 1 restart ${gitClientPath}`);
            cb();
        }, () => {
            console.log('Running git-client...');
            cp.execSync(`forever -m 1 start ${gitClientPath}`);
            cb();
        })
    ]);
});
